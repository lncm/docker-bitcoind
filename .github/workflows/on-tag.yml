name: Build & deploy Bitcoind

on:
  push:
    tags: [ '*' ]

jobs:
  build:
    name: Build Bitcoind
    runs-on: ubuntu-18.04

    strategy:
      matrix:
        arch:
          - amd64
          - arm32v7
          - arm64v8

    env:
      APP: bitcoind
      QEMU_VERSION: v4.2.0
      DOCKER_BUILDKIT: 1

    steps:
      - uses: actions/checkout@v2

      - name: Setup environment
        run: |
          VERSION="$(echo "$GITHUB_REF" | awk -F/ '{print $NF}')"
          VERSION="${VERSION#v}"

          echo ::set-env name=VERSION::"$VERSION"
          echo ::set-env name=DIR::"$(echo "$VERSION" | cut -d. -f-2)"

      - name: Register self-compiled qemu
        if: matrix.arch != 'amd64'
        run: docker run --rm --privileged "meedamian/simple-qemu:$QEMU_VERSION-${{ matrix.arch }}" -p yes

      - name: Build ${{ env.APP }} ${{ env.VERSION }}
        run: >
          docker build "$DIR/"
          --build-arg "VERSION=$VERSION"
          --build-arg "ARCH=${{ matrix.arch }}"
          --tag       "$APP"

      - name: Make sure binaries can be run
        env:
          MINOR: ${{ env.DIR }}
        run: |
          run() {
            ENTRYPOINT="${1:-$APP}"; shift
            ARGS=${*:-"--version"}

            printf "\n$ %s %s\n"  "$ENTRYPOINT"  "$ARGS"
            docker run --rm  --entrypoint "$ENTRYPOINT"  "$APP"  $ARGS
          }

          run  uname -a
          run  bitcoind | head -n 1
          run  bitcoin-cli
          run  bitcoin-tx --help | head -n 1

          # If version higher, or equal than v0.18.0, also run `bitcoin-wallet` binary
          if [ "${MINOR#0.}" -ge "18" ]; then
            run  bitcoin-wallet --help | head -n 1
          fi

      - name: Save built image into a .tgz file
        run: |
          mkdir -p images/

          docker tag  "$APP"  "$APP:${{ matrix.arch }}"
          docker save "$APP:${{ matrix.arch }}" | gzip > "images/$APP-${{ matrix.arch }}.tgz"

      - name: Print sha256sum of built image
        run: sha256sum images/*

      - name: Upload built image
        uses: actions/upload-artifact@v1.0.0
        with:
          name: images
          path: images/


  docker-hub-push:
    name: Tag & deploy to Docker Hub.  Only after successful build and on a git-tag push.

    runs-on: ubuntu-18.04
    needs: build

    env:
      APP: bitcoind

    steps:
      - uses: actions/checkout@v2

      - name: Setup environment
        run: |
          echo ::set-env name=DOCKER_USER::"${GITHUB_ACTOR,,}"
          echo ::set-env name=SLUG::"$(echo ${GITHUB_REPOSITORY,,} | sed 's/docker-//')"
          echo ::set-env name=VERSION::"$(echo "$GITHUB_REF" | awk -F/ '{print $NF}')"

      - name: Enable manifests
        run: |
          mkdir -p ~/.docker

          echo '{ "experimental": "enabled" }' > ~/.docker/config.json
          sudo systemctl restart docker
          docker version

      - name: Login to Docker Hub
        run: |
          echo "Logging in as ${DOCKER_USER}â€¦"
          echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u="$DOCKER_USER" --password-stdin

      - name: Download all build artifacts
        uses: actions/download-artifact@v1.0.0
        with:
          name: images

      - name: Print sha256sum of all images
        run: sha256sum images/*

      - name: Load images locally
        run: ls images/ | xargs  -I %  docker load -i "images/%"

      - name: Version-tag all images
        run: docker images "$APP" --format "{{.Tag}}" | xargs -I %  docker tag  "$APP:%"  "$SLUG:$VERSION-%"

      - name: List all tagged images
        run: docker images "$SLUG"

      - name: Push all images
        run: docker images "$SLUG" --format "{{.Repository}}:{{.Tag}}" | xargs -I %  docker push %

      - name: Create manifest
        run: >
          docker -D manifest create  "$SLUG:$VERSION" \
            "$SLUG:$VERSION-amd64" \
            "$SLUG:$VERSION-arm32v7" \
            "$SLUG:$VERSION-arm64v8"

      - name: Annotate arm32v7
        run: docker manifest annotate "$SLUG:$VERSION" "$SLUG:$VERSION-arm32v7" --os linux --arch arm   --variant v7

      - name: Annotate arm64v8
        run: docker manifest annotate "$SLUG:$VERSION" "$SLUG:$VERSION-arm64v8" --os linux --arch arm64 --variant v8

      - name: Push manifest
        run: docker manifest push "$SLUG:$VERSION"

      - name: Upload images to Github Release
        uses: meeDamian/github-release@v1.0.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ env.VERSION }}
          body: "This release packages `bitcoind` to be on par with https://github.com/bitcoin/bitcoin/releases/tag/${{ env.VERSION }}"
          gzip: false
          files: images/*


